- 인터넷에 연결된 거대한 컴퓨터를 사용하는 것 : 클라우드 컴퓨팅의 중심 생각
- aws에서 다양한 서비스를 제공하고 있음 (EC2, S3등등...)

@AWS 시작하기
+ 보안설정
- 안전한 인프라를 관리하기 위해 IAM 서비스를 이용.
- google otp 앱을 이용하여 2단계 인증을 거치게 됨.

+지역(Region)과 가용구역
- 각 지역마다 AWS의 컴퓨터가 위치해있음.
- 경유지가 많아질수록 네트워크 속도가 저하됨. 
- 또한 서비스하는 웹, 앱의 이용객의 주요 국적이 중요함.
- 지역마다 aws 서비스의 가격이 다름. 이 포인트를 서비스시 유의.
- http://www.cloudping.info를 통해 각 지역 서버에 따른 핑 속도를 알 수 있음.

@EC2 시작하기
+EC2 소개
-가장 먼저 생겨난, 범용적인 서비스
-독립된 컴퓨터 하나를 임대해주는 것으로 보면 됨.
-인스턴스 = 컴퓨터 1대

+EC2 인스턴스 타입
-AMI 선택에서 리눅스, 윈도우 두 개의 큰 운영체제가 존재.
-아마존이 리눅스를 수정하여 만든 아마존 리눅스
-인스턴스 타입 선택. 각각의 컴퓨터 사양을 타입으로 표현.
-t2.nano t2.micro, small, medium, large, xlarge, ...16xlarge
-vCPUs(가상화된 cpu), memory, instance storage, 네트워크성능 고려하여 선택.
-type에 m, c가 붙어있는 경우 m = memory에 우위,  c = cpu에 우위
-성능에 따라 가격정책이 다름.

+EC2 가격정책
-프리티어 750시간, 1년을 구동할 시간보다 여유있음
-용량 30기가까지, i/o 200만건까지 무료
-aws서비스 합산 15기가까지 무료
-켜고 끌 수 있는 '온 디맨드 인스턴스'는 서버가 구동되지 않는 상태일 경우 과금되지 않음.
-각 운영체제에 따라 가격정책이 다름
-미리 결제하여 사용하는 '예약 인스턴스', 온디맨드에 비해 절감이 존재
-구동되지 않는 인스턴스가 많을 때 가격이 저렴해지는 '스팟 인스턴스', 반대의 경우도 존재

+EC2 인스턴스 장치설정
-인스턴스 갯수, 구매옵션(스팟인스턴스), 네트워크, 모니터링 등등..
-종료방식 : 운영체제를 중단할 것인지, terminate할 것인지 선택. 중단될 경우 스토리지 비용만 과금.
-모니터링 : 메모리 점유율, cpu 사용량등을 detail하게 나타냄.
-스토리지 추가 단계, 크기(30기가까지는 무료-운영체제마다 적합한 용량이 있음), 볼륨 유형(저장장치의 타입, SSD나 magnetic)
-IOPS : 저장장치 속도 / 종료시 삭제 : 인스턴스가 폐기되면 저장장치까지 폐기

+EC2 태그와 보안그룹
-EC2 인스턴스에 대한 정보를 담는 것, 태그.
-보안 그룹 구성 단계
-새 보안 그룹 생성 -> 그룹이름, 설명
-보안 그룹에 관한 정책 설정.
-타입 SSH : 원격 제어에 관한 방식(리눅스일 경우 허용해야함)
-Source : 모든 원격 접속을 허용, 혹은 제한 할 경우

+EC2 비밀번호 생성
-인스턴스 시작 검토 단계 : 최종적으로 요약 확인
-인스턴스 네트워크를 접속할 때 키 페어 생성
-키 페어 다운로드 : 랜덤한 비밀번호 부여
-우리가 생성한 인스턴스에 비밀번호 파일을 심어놓음, 다운로드 한 키 페어를 갖고 접속해야만 통과가 가능.

+EC2 리눅스에서 웹서버 사용
-aws 홈페이지->인스턴스->우측 클릭->연결->명령어 copy/terminal paste->우분투 연결
-sudo apt-get install apache2
-리눅스의 서버인 아파치를 apt-get을 이용하여 다운로드함.
-/var/www/html/index.html 수정하여 페이지를 바꿀 수 있음
-인스턴스 보안그룹->인스턴스와 관련된 그룹->인바운드->연결 프로토콜 설정 가능

+EC2 윈도우에서 웹서버 사용
-서버매니저->manage->add roles and features->server roles->web server(IIS)선택
-설치 완료 후 검색->iis 검색->관리자 프로그램 실행
-디렉토리 Site->Default Web Site->우측 클릭 explore->위 경로에 index.html 생성

+AMIs
-인스턴스를 이미지화 시키는 것. 그 상태 그대로를 저장하는 것.
-이미지화 시키고 싶은 인스턴스를 우측 선택->이미지->create image->이미지 정보입력->생성
-이미지가 생성요청될 동안 저장하고자 하는 인스턴스가 일시적으로 정지됨
-해당 이미지를 통해 새로운 인스턴스 생성하기 : 이미지 우측 클릭->launch(시작)->
이미지화 시켰던 인스턴스의 스펙이 그대로 저장되어 있음을 볼 수 있음, 단 보안설정에서 그룹은 별도로 지정하여야 함->인스턴스 생성
-패치작업을 한 후 웹페이지등이 작동하지 않을때 이전에 저장해놓은 이미지를 통해 이전 인스턴스로 돌아갈 수 있음. 이러한 이유로 AMIs를 사용함.

+AWS Marketplace
-타인이 생성한 이미지를 통해 인스턴스를 만드는 것이 가능함.
-아파치나 워드프레스등의 설치 초기작업이 고되므로, 미리 생성되어진 이미지를 통해 인스턴스를 생성하여 위 초기과정을 생략할 수 있음.
-AWS Marketplace 홈페이지 접속->이미지 선택->보안설정,가격정책 확인->launch
-이미지 제공자 가이드를 통해 id/pwd등의 정보를 확인

@AWS를 이용한 자유로운 규모 확장과 축소
+Scalability
-우선 가상머신에 대한 개념을 알아두어야 함.
-컴퓨터를 사용하기 위해서는 물리적기계 컴퓨터 위에 운영체제를 설치
-운영체제를 통해서 기계인 컴퓨터를 제어할 수 있게 됨.
-운영체제위에 가상머신(소프트웨어로 만든 기계)를 설치함.
-가상머신위에 여러 개의 운영체제를 설치하여 작동할 수 있음
-예시로 개인용 파트에서는 VMWare, Parallels등이 있음.
-AWS에서도 여러개의 하드웨어 컴퓨터를 구비하고 있으며, 이 컴퓨터들위에 여러 가상머신을 설치하여 클라우드 컴퓨팅 서비스를 제공하는 것임.
-하나의 컴퓨터의 부분적인 파트만 클라우딩 서비스를 제공받을 수도 있지만 강력한 컴퓨터가 필요할 경우 여러 컴퓨터로 구성된 클라우딩 서비스를 제공받을 수도 있음.
-클라우드 컴퓨팅은 접속자(수요)에 맞추어 서비스를 맞춤 제공할 수 있음.
-반대로 따로 하드웨어 서버를 구비할 경우 사업의 하향곡선(즉, 수요가 떨어지는 것)을 맞게되면 타격을 입을 수 있음.
-그러므로 클라우드 컴퓨팅이 경제적이며 현재 승승장구하고 있는 이유로 들 수 있음.-이러한 맥락에서 클라우드 컴퓨팅은 Scalability(확장성)을 갖고 있음.

+Scale Up
-Scalability의 구체적인 작업. 두 가지의 전략이 존재함.
-하나는 Scale up, 나머지는 Scale out
-컴퓨터 수요를 충족시키지 못하면 더 좋은 컴퓨터로 사용 : Scale Up

+스트레스 테스트(서버 과부하 실습)
-서비스를 제공하는 파트와 이용하는 파트, 즉 두 개의 인스턴스를 구현함.
-Scale Up을 구현하기 위해 무거운 웹어플리케이션을 담은 인스턴스를 준비(서비스공급자-수비 파트)
-다른 하나의 인스턴스는 위 웹어플리케이션을 이용함(서비스이용자-공격 파트)
-서비스 이용자가 부하를 일으켜야 하므로 부하발생기를 설치, 실행해야 함.
-서비스를 이용하는 인스턴스의 서버를 실행함 
-'sudo apt-get update' 명령어를 입력.
-이용할 수 있는 프로그램 목록이 업데이트 되며,
-'sudo apt-get install apache2-utils' 입력하여 부하발생기 설치
-서비스 이용 과부하를 발생시키는 부하발생기, ab를 이용할 수 있음.
-'ab -n 400 -c 1 접속ip주소' 접속횟수 400, 동시접속 1
-서비스 제공자 서버에서 cpu 점유율이 접속시 올라가는 것을 확인할 수 있음.
-또한, 동시접속을 올릴수록 개별처리속도는 느려지게 됨.
-개개인 이용자에게 서비스 이용의 질이 떨어지게 되므로 Scale Up을 해야 함.

+Elastic IPs(Scale Up, 인스턴스 교체를 하기 위해 필요한 Elastic IP)
-인스턴스를 재실행하면 IP가 바뀌게 됨. 바뀌는 이유는 ip고갈현상에 따른 회수조치 때문임.
-ip주소는 약 40억여개가 존재할 수 있음. 그러나 컴퓨터의 갯수가 40억개가 넘어가므로 ip고갈현상이 발생함.
-그러므로 인스턴스(컴퓨터)를 이용하지 않는 순간 ip를 회수해감.
-사용자 입장에서는 동일한 ip가 제공되어야 서비스를 혼란없이 이용할 수 있음.
-제공자가 고정적인 ip를 얻고자 한다면 Elastic IPs를 이용하면 됨. 이는 유료서비스임.
-Elastic IP적용방법 : Elastic IP를 발급받고 해당 ip를 우클릭->associate address->ip를 적용시킬 인스턴스를 입력함
-엘라스틱 ip가 적용된 인스턴스는 종료후 재실행하여도 ip가 고정되어 있음을 확인할 수 있음.

+인스턴스교체(Scale Up 실습)
-사용자의 접속이 늘어나고 있는 가정하에, 서비스를 제공하는 수비측 인스턴스를 이미지화시킴.
-이미지화 과정중에는 해당 인스턴스가 잠깐 중단됨.
-AMIs에서 이미지를 확인하고 이를 통해 인스턴스를 시작.
-인스턴스를 시작하는 단계에서 인스턴스 타입을 이전에 사용했던 타입보다 상위버전으로 선택, 시작
-새로 만든 상위 타입의 인스턴스에 이전 하위 인스턴스에 적용되었던 elastic IP를 적용함.
-Scale Up에서 한계가 발생하면 Scale Out 전략을 사용함.
-Scale Out은 여러 컴퓨터를 협력하여 트래픽을 감당하게 하는 전략임.
-Scale Up으로 부하가 감당가능하다면 가급적이면 Scale Up전략을 적용해야 함.
-scale out은 적당한 규모가 꾸려진 이후에 고려해야 할 전략임.

+Scale Out의 소개
-여러개의 컴퓨터가 협력, 연결되서 동일한 목표를 이루는 것.

+Scale Out의 흐름
-서버 컴퓨터에 웹서버->미들웨어->데이터베이스 구조가 존재함.
-과부하나 제대로 된 서비스를 제공하지 못한다면 데이터베이스를 또 다른 컴퓨터에 이식함.
-사용자의 입장에서는 변한 것이 없지만 내부적인 구조는 변화가 생김.
-Scalability는 좋아졌으나 복잡도가 높아졌음.
-여러 대의 컴퓨터간 통신이 이뤄지므로 전송속도의 저하가 있을 수 있지만, 여러 대의 협력으로 인해 문제 해결력이 빨라짐.
-또한 웹서버, 미들웨어, 데이터베이스를 각각의 컴퓨터로 분리할 수도 있음.
-이후 데이터베이스가 커질수록 데이터베이스를 여러 대의 컴퓨터에 저장.
-두 데이터베이스는 복제되어 항상 동일한 상태를 유지하도록 함.
-한 컴퓨터는 데이터베이스 읽기, 나머지는 쓰기로 나눠서 운영함.
-그래도 데이터베이스가 부족하다면 데이터베이스 '샤딩'을 통해서 사용자를 분산하는 방식을 채택함.
-데이터베이스뿐만 아니라 미들웨어또한 여러 컴퓨터에 역할을 분배할 수 있음.
-웹서버도 여러 컴퓨터에 둘 수 있음. 다만 DNS서버에서 각기 다른 웹서버로 안내하여 분산하는 효과를 얻는 것임.
-또한 'Load Balancer'가 웹서버 프론트단에서 ip를 갖고 여러 웹서버로 분산하여 나눠주기도 함.
-로드 밸런서는 웹서버의 성능차이, 웹서버의 고장을 파악하여 적절한 부하분산을 실시함.

+ELB(Elastic Load Balancer) 생성
-aws에서 load balancer 탭->create load balancer
-프로토콜과 보안그룹 설정, Health Check(정기적인 서버체크로 적절한 부하분산 가능), 인스턴스 설정, 태그, 리뷰->elb 생성
-elb생성시 DNS name이 주어짐. 해당 dns로 접속하면 여러 인스턴스로 부하분산을 시켜줌.
-elb에 edit instance를 통해 인스턴스를 연결함.
-









